---
# Copyright 2016, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- hosts: all
  connection: local
  vars_prompt:
    - name: destroy_ok
      prompt: |
        "The following actions are destructive and remove items from your
        database. Would you like to continue ? (yes/no)"
      private: no
      default: "no"
  tasks:
    - set_fact:
        destroy: "{{ destroy_ok }}"

- name: Cleanup heat services through the database
  hosts: galera_all[0]
  user: root
  tasks:
    - name: Run database clean up for rfc1034/5
      command: >
        mysql --verbose --unbuffered -e "delete from service where host like '%\_%';" heat
      when: destroy | bool

- name: Apply cinder changes with cinder-manage
  hosts: cinder_all[0]
  user: root
  tasks:
    - name: Move the cinder volumes running in containers to new hostnames
      shell: |
        . /openstack/venvs/cinder-{{openstack_release}}/bin/activate
        cinder-manage service list \
          | awk '/volume.*_container.*XXX/{print $2 }'\
          | while IFS=@ read cinderhost cinderbackend; do
            cinder-manage volume update_host \
              --currenthost $cinderhost@$cinderbackend \
              --newhost ${cinderhost//_/-}@$cinderbackend;
            done
      args:
        executable: /bin/bash

- name: Disable/delete the services with CLIs
  hosts: utility_all[0]
  user: root
  vars:
    services:
      - name: "nova"
        list_command: " service-list "
        awk_filter: "/_container.*down/"
        awk_print_column: '$6" "$4'
        delete_command: " service-disable "
        post_command: "sleep 5"
      - name: "nova"
        list_command: " service-list "
        awk_filter: "/_container.*down/"
        awk_print_column: "$2"
        delete_command: " service-delete "
      - name: "cinder"
        list_command: " service-list "
        awk_filter: "/_container.*down/"
        awk_print_column: '$4" "$2'
        delete_command: " service-disable "
      - name: "neutron"
        list_command: " agent-list "
        awk_filter: "/_container.*xxx/"
        awk_print_column: "$2"
        delete_command: " agent-update --admin-state-down "
        post_command: "sleep 5"
      - name: "neutron"
        list_command: " agent-list "
        awk_filter: "/_container.*xxx/"
        awk_print_column: "$2"
        delete_command: " agent-delete "
  tasks:
    - name: Registering what to disable
      shell: |
        . {{ ansible_env.HOME }}/openrc
        {{ item.name }} {{ item.list_command}} | awk '{{ item.awk_filter }}{print {{ item.awk_print_column }} }'
      register: to_disable
      with_items: "{{ services }}"

    - name: showing the list of items
      debug:
        msg: "We will delete the following item for {{ item.0.item.name }}: {{ item.1 }}"
      with_subelements:
        - to_disable.results
        - stdout_lines

    - name: Disabling or deleting the services/agents
      shell: |
        . {{ ansible_env.HOME }}/openrc
        {{ item.0.item.name }} {{ item.0.item.delete_command }} {{ item.1 }}
        {{ item.0.item.post_command | default('')}}
      with_subelements:
        - to_disable.results
        - stdout_lines
      when: destroy | bool

- name: Apply cinder changes with cinder-manage
  hosts: cinder_all[0]
  user: root
  tasks:
    - name: Removing the cinder services with old container hostnames
      shell: |
        . /openstack/venvs/cinder-{{openstack_release}}/bin/activate
        cinder-manage service list \
          | awk '/.*_container.*XXX/{print $1" "$2}'\
          | while read line; do
            cinder-manage service remove $line;
            done
      args:
        executable: /bin/bash
      when: destroy | bool

- name: Cleanup layer2 ports
  gather_facts: no
  hosts: utility_all[0]
  tasks:
    - name: disable and delete new ports
      # list all the ports, sort them by network and then state in the reverse order.
      # Save the network if there is an old dhcp port to migrate. Check if there are
      # dhcp ports in the same network that are active. Print them for deletion.
      shell: |
        . {{ ansible_env.HOME }}/openrc
        neutron port-list -c id -c device_owner -c binding:host_id -c status \
          -c network_id  -f value | sort -k 5 -k 4 -r | \
          awk '/dhcp.*BUILD/{net=$5}; /dhcp.*ACTIVE/{if(net==$5){print $1}}' | \
          while read portid; do
            neutron port-update --admin-state-up False $portid
            sleep 1
            neutron port-delete $portid
            done
      when: destroy | bool

- hosts: rabbitmq_all[0]
  gather_facts: no
  tasks:
    - name: List the container inventory hostnames
      set_fact:
        neutron_invalid_hostnames: "{{ groups['neutron_all'] | difference(groups['hosts']) }}"
        heat_invalid_hostnames: "{{ groups['heat_all'] | difference(groups['hosts']) }}"
        nova_invalid_hostnames: "{{ groups['nova_all'] | difference(groups['hosts']) }}"
        cinder_invalid_hostnames: "{{ groups['cinder_all'] | difference(groups['hosts']) }}"
      tags:
        - rabbitmq-queues-cleanup

    - name: List queues matching old hostname
      shell: "rabbitmqctl list_queues -p {{ item.vhost }} | grep -e {{ item.search_pattern }} | cut -f 1 "
      register: rabbit_queues
      with_items:
        - vhost: "{{ neutron_rabbitmq_vhost }}"
          search_pattern: "{{ neutron_invalid_hostnames | join(' -e ') }}"
        - vhost: "{{ heat_rabbitmq_vhost }}"
          search_pattern: "{{ heat_invalid_hostnames | join(' -e ') }}"
        - vhost: "{{ nova_rabbitmq_vhost }}"
          search_pattern: "{{ nova_invalid_hostnames | join(' -e ') }}"
        - vhost: "{{ cinder_rabbitmq_vhost }}"
          search_pattern: "{{ cinder_invalid_hostnames | join(' -e ') }}"
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-queues-list

    - name: Dropping rabbitmqadmin
      get_url:
        url: "http://127.0.0.1:15672/cli/rabbitmqadmin"
        dest: /usr/local/bin/rabbitmqadmin
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmqadmin-tool-dl

    - file:
        path: "/usr/local/bin/rabbitmqadmin"
        mode: "u+x"
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmqadmin-tool-dl-perms

    - name: Create rabbitmq temp admin user
      rabbitmq_user:
        user: "rabbitmqcleanup"
        password: "{{ lookup('password','/tmp/rabbitmqcleanup_tmp_passwd') }}"
        vhost: "/"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        tags: "administrator"
        state: "present"
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-temp-user-create

    - name: Ensure rabbitmq temp admin user has access to all necessary vhosts
      rabbitmq_user:
        user: "rabbitmqcleanup"
        password: "{{ lookup('file','/tmp/rabbitmqcleanup_tmp_passwd') }}"
        vhost: "{{ item.item.vhost }}"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        tags: "administrator"
        state: "present"
      with_items: "{{ rabbit_queues.results }}"
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-temp-user-privileges

    - name: Delete queues using rabbitmqadmin (needs admin rights)
      shell: "/usr/local/bin/rabbitmqadmin -u rabbitmqcleanup -p {{ lookup('file','/tmp/rabbitmqcleanup_tmp_passwd') }} --vhost={{ item.0.item.vhost }} delete queue name={{ item.1 }}"
      with_subelements:
        - rabbit_queues.results
        - stdout_lines
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-queues-delete

    - name: Delete rabbitmq temp admin user
      rabbitmq_user:
        user: "rabbitmqcleanup"
        password: "{{ lookup('file','/tmp/rabbitmqcleanup_tmp_passwd') }}"
        vhost: "/"
        configure_priv: ".*"
        read_priv: ".*"
        write_priv: ".*"
        tags: "administrator"
        state: "absent"
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-temp-user-delete

    - name: Delete rabbitmq temp admin user password
      file:
        path: "/tmp/rabbitmqcleanup_tmp_passwd"
        state: absent
      tags:
        - rabbitmq-queues-cleanup
        - rabbitmq-temp-user-delete
